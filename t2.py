#!/usr/bin/env python
import tracer
import angr
import simuvex
import sys
import os
if len(sys.argv)<2:
	print 'please give an input'
	sys.exit(1)
#p = angr.Project('./t')

#cfg = p.analyses.CFG()
#hks={}
#for addr,func in cfg.kb.functions.iteritems():
   # try:
      #  if func.name in simuvex.SimProcedures['libc.so.6']:
     #   	hks[addr]=simuvex.SimProcedures['libc.so.6'][func.name]
    #    elif func.name in simuvex.SimProcedures['ld-linux-x86-64.so.2']:
   #         hks[addr]=simuvex.SimProcedures['ld-linux-x86-64.so.2'][func.name]
  #      print 'try to hook '+func.name
 #   except:
#        pass

#t=tracer.Tracer('./t',sys.argv[1],hooks=hks)
t=tracer.Tracer('./t_static_stripped',sys.argv[1])
#t.path_group.analyses.StaticHooker()
branches=t.next_branch()

while len(branches.active)>0 and t.bb_cnt<len(t.trace):
	if len(branches.missed)>0:
		print '[bb_cnt]',t.bb_cnt
		#print '[angr]'+hex(branches.active[0].addr)
		prev_addr=branches.missed[0].addr_trace[-1]
		#print '[missed_addr]'+hex(prev_addr)
		#print '[missed_len]',len(branches.missed)
		for path in branches.missed:
			t.remove_preconstraints(path)
			if not path.state.satisfiable():
				print 'path to '+hex(path.addr)+' was not satisfiable'
			else:
				t_pos=path.state.posix.files[0].pos
				path.state.posix.files[0].seek(0)
				gen=path.state.posix.read_from(0,t_pos)
				gen=path.state.se.any_str(gen)
				path.state.posix.files[0].seek(t_pos)
				print 'gen %s | [%s]' %(gen,gen.encode('hex'))
	branches=t.next_branch()
print 'bb_cnt:',t.bb_cnt,'trace',len(t.trace)

